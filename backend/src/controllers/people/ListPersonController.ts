/**
 * ListPersonController.ts - Busca listas de pessoas com filtros e pagina√ß√£o
 * # Pra que serve?
 * - Lista alunos, professores e outros cadastrados com op√ß√µes de busca
 * - Gerencia pagina√ß√£o pra n√£o sobrecarregar o sistema com muitos dados
 * Feito por: Arthur Roberto Weege Pontes
 * Vers√£o: 1.4.0
 * Data: 2025-07-05 (Finalizado)
 * Altera√ß√µes:
 * - v1.0.0 (2025-06-20): Pagina√ß√£o b√°sica
 * - v1.1.0 (2025-06-25): Filtros avan√ßados por tipo e unidade
 * - v1.2.0 (2025-07-01): Ordena√ß√£o personaliz√°vel
 * - v1.3.0 (2025-07-05): Otimiza√ß√£o de desempenho
 * - v1.4.0 (2025-07-20): Recebe par√¢metros via JSON body
 */

import { FastifyReply, FastifyRequest } from "fastify";
import { ListPersonService } from "../../services/people/ListPersonService";
import { PersonType } from "@prisma/client";

// Cuida da parte de listar pessoas (tipo quando voc√™ quer ver todos de uma turma ou unidade)
export class ListPersonController {
  // Processa o pedido de listagem (rota que o front chama pra buscar v√°rias pessoas)

  async handle(request: FastifyRequest, reply: FastifyReply) {
    try {
      // Extrai os par√¢metros do corpo da requisi√ß√£o
      const body = request.body as {
        unit_code: string;
        type?: PersonType;
        page: number;
        page_size: number;
      };

      const unit_code = body?.unit_code;
      const type = body?.type;
      const page = body?.page;
      const page_size = body?.page_size;

      // Manda o servi√ßo buscar as pessoas com esses filtros
      const service = new ListPersonService();
      const result = await service.execute({
        unit_code,
        type,
        page,
        page_size,
      });

      // Retorna a lista paginada pro front
      return reply.status(200).send({
        ...result,
        message: `Encontramos ${result.total} pessoas! üìã`,
      });
    } catch (error: any) {
      // Se a unidade n√£o foi encontrada (c√≥digo errado ou n√£o existe)
      if (error.message === "Unidade n√£o encontrada") {
        return reply.status(404).send({
          error: "Unidade n√£o encontrada",
          tip: "Confere o c√≥digo da unidade, t√° certo?",
        });
      }

      // Qualquer outro erro (valida√ß√£o, banco, etc.)
      console.error("Deu ruim na listagem:", error);
      return reply.status(400).send({
        error: "Opa, n√£o consegui listar as pessoas!",
        solution: "Verifica os filtros ou tenta de novo mais tarde",
      });
    }
  }
}